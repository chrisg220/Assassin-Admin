== Assassin Admin

This program manages a game of Assassin by creating a list of alive assassins with a given file a names. The class performs tasks and moves killed assassins into a dead list until a single alive assassin emerges as the winner.


== Public Methods
	
pre : names must be a non-empty List of Strings (throws IllegalArgumentException if not)
post: constructs an AssassinAdmin object with a kill ring list with, and in the same order as, the given file of names
       public AssassinAdmin(List<String> names)
	
post: prints the names of the people in the kill ring and who they are stalking. If there is only one person, it reports that they are stalking themselves.
       void printKillRing()(Scanner input)

pre : output file name is legal
post: prints the current tree in preorder fashion to an output file.
       void printGraveyard()

post: asks a series of yes/no questions until the program either correctly guesses the user's object, or until the program discovers a new object, in which case it willthen insert it into the tree and replace the current tree with the new tree.
       boolean killRingContains(String name)
	
post: asks the user a question, forcing an answer of "y" or "n". returns true if the answer was yes, returns false otherwise
       boolean graveyardContains(String name)

pre : output file name is legal
post: prints the current tree in preorder fashion to an output file.
       boolean gameOver()

pre : output file name is legal
post: prints the current tree in preorder fashion to an output file.
       String winner()

pre : output file name is legal
post: prints the current tree in preorder fashion to an output file.
       void kill(String name)